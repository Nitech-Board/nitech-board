generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model student {
  id             String   @id @default(cuid())
  name           String
  enrollmentYear Int      @map("enrollment_year")
  reviews        review[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model teacher {
  id        String   @id @default(cuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  courses   course[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model course {
  id            String          @id @default(cuid())
  title         String
  teacherId     String          @map("teacher_id")
  teacher       teacher         @relation(fields: [teacherId], references: [id])
  courseNumbers course_number[]
  reviews       review[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model course_number {
  id       String  @id @default(cuid())
  number   String
  course   course? @relation(fields: [courseId], references: [id])
  courseId String? @map("course_id")
}

model review {
  id        String  @id @default(cuid())
  courseId  String  @map("course_id")
  course    course  @relation(fields: [courseId], references: [id])
  studentId String  @map("student_id")
  student   student @relation(fields: [studentId], references: [id])

  homeworkRating   Int    @map("homework_rating")
  difficultyRating Int    @map("difficulty_rating")
  examRating       Int    @map("exam_rating")
  note             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
